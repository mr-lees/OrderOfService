/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package OrderOfService;

import javax.swing.table.DefaultTableModel;
import javax.swing.JTable;

/**
 *
 * @author 7-NDeverill
 */
public class CreateServiceManual extends javax.swing.JFrame {

    /**
     * Creates new form CreateServiceManual
     */
    public CreateServiceManual() {
        initComponents();
        
    }
    
    
    /**
     * Method that handles the moving of items in the table
     * @param itemIndex - the current index of the item
     * @param proposedIndex - the new index of the item
     */
    public void moveItem(int itemIndex, int proposedIndex) {
        int index = itemIndex;
        int newIndex = proposedIndex;
        DefaultTableModel model = (DefaultTableModel) tblOrderOfService.getModel();
        
        //If newIndex is greater than current index:
        if(newIndex > index) {
            //Move the item to its new index
            model.moveRow(index, index, newIndex);
            
            //Change the index of the moved item
            model.setValueAt(newIndex, newIndex, 0);
            
            //Change the index of each item that has been moved
            for(int i = index; i < newIndex; i++) {
                int changedIndex = Integer.parseInt(model.getValueAt(i, 0).toString()) - 1;
                model.setValueAt(changedIndex, i, 0);
            }
        }
        //Otherwise, if newIndex is less than current index:
        else if(newIndex < index) {
            
             
            //Change the index of each item that has been moved
            for(int i = newIndex; i < index; i++) {
                int changedIndex = Integer.parseInt(model.getValueAt(i, 0).toString()) + 1;
                model.setValueAt(changedIndex, i, 0);
            }
            
            //Move the item to its new index
            model.moveRow(index, index, newIndex);
            
            //Change the index of the moved item
            model.setValueAt(newIndex, newIndex, 0);
        }
        
        tfCurrentIndex.setText("");
        tfNewIndex.setText("");
    }
    
    
    /**
     * Method that handles the removal of items in the table
     * @param itemIndex 
     */
    public void removeItem(int itemIndex) {
        int index = itemIndex;
        DefaultTableModel model = (DefaultTableModel) tblOrderOfService.getModel();
        
        //If the item is the last item in the table then simply delete
        if(index == (model.getRowCount() - 1)) {
            model.removeRow(index);
        }
        
        //If the item is not the last then move each item after it up by one
        else {
            //Remove the item
            model.removeRow(index);
            //Move the indexes of every other item down by one
            for(int i = index; i < model.getRowCount(); i++) {
                int newIndex = Integer.parseInt(model.getValueAt(i, 0).toString()) - 1;
                model.setValueAt(newIndex, i, 0);
            }
        }
        
        tfRemoveIndex.setText("");
    }

    /**
     * This method is called from within the constructor to initialise the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lHeading = new javax.swing.JLabel();
        bAddSong = new javax.swing.JButton();
        bAddSpeaker = new javax.swing.JButton();
        bAddOther = new javax.swing.JButton();
        tfOther = new javax.swing.JTextField();
        lLogo = new javax.swing.JLabel();
        bSubmit = new javax.swing.JButton();
        spTable = new javax.swing.JScrollPane();
        tblOrderOfService = new javax.swing.JTable();
        bAddReading = new javax.swing.JButton();
        tfCurrentIndex = new javax.swing.JTextField();
        tfNewIndex = new javax.swing.JTextField();
        lCurrentIndex = new javax.swing.JLabel();
        lNewIndex = new javax.swing.JLabel();
        bMoveItem = new javax.swing.JButton();
        bRemoveItem = new javax.swing.JButton();
        lRemoveIndex = new javax.swing.JLabel();
        tfRemoveIndex = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("GWBC Order of Service Manager - Create Service");
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(218, 227, 243));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(68, 114, 196), 2));

        lHeading.setFont(new java.awt.Font("Calibri", 3, 36)); // NOI18N
        lHeading.setForeground(new java.awt.Color(31, 56, 100));
        lHeading.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lHeading.setText("GWBC Create Service");

        bAddSong.setBackground(new java.awt.Color(180, 199, 231));
        bAddSong.setFont(new java.awt.Font("Calibri Light", 1, 16)); // NOI18N
        bAddSong.setForeground(new java.awt.Color(31, 56, 100));
        bAddSong.setText("Add Song");
        bAddSong.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bAddSongActionPerformed(evt);
            }
        });

        bAddSpeaker.setBackground(new java.awt.Color(180, 199, 231));
        bAddSpeaker.setFont(new java.awt.Font("Calibri Light", 1, 16)); // NOI18N
        bAddSpeaker.setForeground(new java.awt.Color(31, 56, 100));
        bAddSpeaker.setText("Add Speaker");
        bAddSpeaker.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bAddSpeakerActionPerformed(evt);
            }
        });

        bAddOther.setBackground(new java.awt.Color(180, 199, 231));
        bAddOther.setFont(new java.awt.Font("Calibri Light", 1, 16)); // NOI18N
        bAddOther.setForeground(new java.awt.Color(31, 56, 100));
        bAddOther.setText("Add Other");
        bAddOther.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bAddOtherActionPerformed(evt);
            }
        });

        lLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/OrderOfService/GWBC Logo.png"))); // NOI18N

        bSubmit.setBackground(new java.awt.Color(180, 199, 231));
        bSubmit.setFont(new java.awt.Font("Calibri Light", 1, 16)); // NOI18N
        bSubmit.setForeground(new java.awt.Color(31, 56, 100));
        bSubmit.setText("Submit Service");
        bSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSubmitActionPerformed(evt);
            }
        });

        spTable.setBackground(new java.awt.Color(218, 227, 243));
        spTable.setBorder(javax.swing.BorderFactory.createTitledBorder("Current Order of Service"));

        tblOrderOfService.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Index", "Item Type", "Title", "Key"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        spTable.setViewportView(tblOrderOfService);

        bAddReading.setBackground(new java.awt.Color(180, 199, 231));
        bAddReading.setFont(new java.awt.Font("Calibri Light", 1, 16)); // NOI18N
        bAddReading.setForeground(new java.awt.Color(31, 56, 100));
        bAddReading.setText("Add Reading");
        bAddReading.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bAddReadingActionPerformed(evt);
            }
        });

        tfCurrentIndex.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tfCurrentIndexKeyTyped(evt);
            }
        });

        tfNewIndex.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tfNewIndexKeyTyped(evt);
            }
        });

        lCurrentIndex.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        lCurrentIndex.setForeground(new java.awt.Color(31, 56, 100));
        lCurrentIndex.setText("Enter the current index:");

        lNewIndex.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        lNewIndex.setForeground(new java.awt.Color(31, 56, 100));
        lNewIndex.setText("Enter the new index:");

        bMoveItem.setBackground(new java.awt.Color(180, 199, 231));
        bMoveItem.setFont(new java.awt.Font("Calibri Light", 1, 16)); // NOI18N
        bMoveItem.setForeground(new java.awt.Color(31, 56, 100));
        bMoveItem.setText("Move Item");
        bMoveItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bMoveItemActionPerformed(evt);
            }
        });

        bRemoveItem.setBackground(new java.awt.Color(180, 199, 231));
        bRemoveItem.setFont(new java.awt.Font("Calibri Light", 1, 16)); // NOI18N
        bRemoveItem.setForeground(new java.awt.Color(31, 56, 100));
        bRemoveItem.setText("Remove Item");
        bRemoveItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bRemoveItemActionPerformed(evt);
            }
        });

        lRemoveIndex.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        lRemoveIndex.setForeground(new java.awt.Color(31, 56, 100));
        lRemoveIndex.setText("Enter the index of the item to be removed:");

        tfRemoveIndex.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tfRemoveIndexKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(lLogo)
                .addContainerGap())
            .addComponent(lHeading, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(spTable, javax.swing.GroupLayout.PREFERRED_SIZE, 570, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 50, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addComponent(bSubmit, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(113, 113, 113))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addComponent(tfOther, javax.swing.GroupLayout.PREFERRED_SIZE, 479, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)))))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(bAddSpeaker, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(bAddSong, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(bAddReading, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(bAddOther, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(lRemoveIndex)
                        .addGap(18, 18, 18)
                        .addComponent(tfRemoveIndex, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(bRemoveItem, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(lCurrentIndex)
                        .addGap(18, 18, 18)
                        .addComponent(tfCurrentIndex, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lNewIndex)
                        .addGap(18, 18, 18)
                        .addComponent(tfNewIndex, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(bMoveItem, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(30, 30, 30))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(lHeading, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(bAddSong, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(40, 40, 40)
                        .addComponent(bAddSpeaker, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(40, 40, 40)
                        .addComponent(bAddReading, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(spTable, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(40, 40, 40)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bAddOther, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfOther, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bMoveItem, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lCurrentIndex)
                    .addComponent(tfCurrentIndex, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lNewIndex)
                    .addComponent(tfNewIndex, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(40, 40, 40)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bRemoveItem, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lRemoveIndex)
                    .addComponent(tfRemoveIndex, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(40, 40, 40)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(bSubmit, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lLogo, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bAddOtherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bAddOtherActionPerformed
        //Only add when the text field is not empty
        if(tfOther.getText().length() != 0) {
            DefaultTableModel model = (DefaultTableModel) tblOrderOfService.getModel();
            int index = model.getRowCount();
            
            model.addRow(new Object[]{index, "Other", tfOther.getText(), null});
        
            tblOrderOfService.setModel(model);
            
            //Set the text of tfOther to null
            tfOther.setText("");
        }
    }//GEN-LAST:event_bAddOtherActionPerformed

    private void bAddSpeakerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bAddSpeakerActionPerformed
        AddSpeakerToOrder addSpeaker = new AddSpeakerToOrder();
        addSpeaker.setVisible(true);
    }//GEN-LAST:event_bAddSpeakerActionPerformed

    private void bAddSongActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bAddSongActionPerformed
        AddSongToOrder addSong = new AddSongToOrder();
        addSong.setVisible(true);
    }//GEN-LAST:event_bAddSongActionPerformed

    private void bAddReadingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bAddReadingActionPerformed
        AddReadingToOrder addReading = new AddReadingToOrder();
        addReading.setVisible(true);
    }//GEN-LAST:event_bAddReadingActionPerformed

    private void bSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSubmitActionPerformed
        SubmitService submitService = new SubmitService(this);
        submitService.setVisible(true);
        
        //Close this form
        dispose();
    }//GEN-LAST:event_bSubmitActionPerformed

    /**
     * Key listener that ensures that only numeric characters are typed
     * @param evt 
     */
    private void tfCurrentIndexKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfCurrentIndexKeyTyped
        char inChar = evt.getKeyChar();
        
        if(Character.isDigit(inChar) == false) {
            evt.consume();
        }
    }//GEN-LAST:event_tfCurrentIndexKeyTyped

    /**
     * Key listener that ensures that only numeric characters are typed
     * @param evt 
     */
    private void tfNewIndexKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfNewIndexKeyTyped
        char inChar = evt.getKeyChar();
        
        if(Character.isDigit(inChar) == false) {
            evt.consume();
        }
    }//GEN-LAST:event_tfNewIndexKeyTyped

    /**
     * Key listener that ensures that only numeric characters are typed
     * @param evt 
     */
    private void tfRemoveIndexKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfRemoveIndexKeyTyped
        char inChar = evt.getKeyChar();
        
        if(Character.isDigit(inChar) == false) {
            evt.consume();
        }
    }//GEN-LAST:event_tfRemoveIndexKeyTyped

    /**
     * Removes the item when given an index
     * @param evt 
     */
    private void bRemoveItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bRemoveItemActionPerformed
        DefaultTableModel model = (DefaultTableModel) tblOrderOfService.getModel();
        
        //Check if text field is empty
        if(tfRemoveIndex.getText().isEmpty() == true) {
            UserMessageBox myMessage = new UserMessageBox();
            myMessage.setTitle("Input Error");
            myMessage.setMessage("Nothing has been inputted yet");
            myMessage.setVisible(true);
        }
        else {
            int Index = Integer.parseInt(tfRemoveIndex.getText());
            
            
            //Validate the inputted index
            if(Index < 0 || Index >= model.getRowCount()) {
                UserMessageBox myMessage = new UserMessageBox();
                myMessage.setTitle("Error removing item");
                myMessage.setMessage("The inputted index doesn't exist \n"
                        + "Item has not been removed");
                myMessage.setVisible(true);
            }
            else {
                removeItem(Index);
            }
        }
    }//GEN-LAST:event_bRemoveItemActionPerformed

    /**
     * Moves a chosen item in the table to a selected index
     * @param evt 
     */
    private void bMoveItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bMoveItemActionPerformed
        DefaultTableModel model = (DefaultTableModel) tblOrderOfService.getModel();
        
        //Check if current index text field is empty
        if(tfCurrentIndex.getText().isEmpty() == true) {
            UserMessageBox myMessage = new UserMessageBox();
            myMessage.setTitle("Input Error");
            myMessage.setMessage("Nothing has been inputted in the Current Index text field");
            myMessage.setVisible(true);
        }
        //Check if new index text field is empty
        else if(tfNewIndex.getText().isEmpty() == true) {
            UserMessageBox myMessage = new UserMessageBox();
            myMessage.setTitle("Input Error");
            myMessage.setMessage("Nothing has been inputted in the New Index text field");
            myMessage.setVisible(true);
        }
        else {
            int Index = Integer.parseInt(tfCurrentIndex.getText());
            int newIndex = Integer.parseInt(tfNewIndex.getText());
            
            //Validate the current index
            if(Index < 0 || Index >= model.getRowCount()) {
                UserMessageBox myMessage = new UserMessageBox();
                myMessage.setTitle("Error removing item");
                myMessage.setMessage("The current index doesn't exist \n"
                        + "Item has not been removed");
                myMessage.setVisible(true);
            }
            else if(newIndex < 0 || newIndex >= model.getRowCount()) {
                UserMessageBox myMessage = new UserMessageBox();
                myMessage.setTitle("Error removing item");
                myMessage.setMessage("The new index doesn't exist \n"
                        + "Order of Service has not been changed");
                myMessage.setVisible(true);
            }
            else {
                moveItem(Index, newIndex);
            }
        }
    }//GEN-LAST:event_bMoveItemActionPerformed


    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CreateServiceManual.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CreateServiceManual.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CreateServiceManual.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CreateServiceManual.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CreateServiceManual().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bAddOther;
    private javax.swing.JButton bAddReading;
    private javax.swing.JButton bAddSong;
    private javax.swing.JButton bAddSpeaker;
    private javax.swing.JButton bMoveItem;
    private javax.swing.JButton bRemoveItem;
    private javax.swing.JButton bSubmit;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lCurrentIndex;
    private javax.swing.JLabel lHeading;
    private javax.swing.JLabel lLogo;
    private javax.swing.JLabel lNewIndex;
    private javax.swing.JLabel lRemoveIndex;
    private javax.swing.JScrollPane spTable;
    protected static javax.swing.JTable tblOrderOfService;
    private javax.swing.JTextField tfCurrentIndex;
    private javax.swing.JTextField tfNewIndex;
    private javax.swing.JTextField tfOther;
    private javax.swing.JTextField tfRemoveIndex;
    // End of variables declaration//GEN-END:variables
}
